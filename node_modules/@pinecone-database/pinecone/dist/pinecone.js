"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pinecone = void 0;
var pinecone_generated_ts_fetch_1 = require("./pinecone-generated-ts-fetch");
var control_1 = require("./control");
var errors_1 = require("./errors");
var data_1 = require("./data");
var validator_1 = require("./validator");
var utils_1 = require("./utils");
/**
 * @example
 * ```
 * import { Pinecone } from '@pinecone-database/pinecone';
 * const client = new Pinecone();
 * ```
 */
var Pinecone = /** @class */ (function () {
    /**
     * @example
     * ```
     * import { Pinecone } from '@pinecone-database/pinecone`
     * const client = new Pinecone({ apiKey: 'my-api-key', environment: 'us-west1-gcp', projectId: 'my-project-id' })
     * ```
     *
     * @constructor
     * @param options - The configuration options for the client.
     * @param options.apiKey - The API key for your Pinecone project. You can find this in the [Pinecone console](https://app.pinecone.io).
     * @param options.environment - The environment for your Pinecone project. You can find this in the [Pinecone console](https://app.pinecone.io).
     * @param options.projectId - The project ID for your Pinecone project. This optional field can be passed, but if it is not then it will be automatically fetched when needed.
     * @param options.fetchApi - Optional configuration field for specifying the fetch implementation. If not specified, the client will look for fetch in the global scope and if none is found it will fall back to a cross-fetch polyfill.
     */
    function Pinecone(options) {
        if (options === undefined) {
            options = this._readEnvironmentConfig();
        }
        this._validateConfig(options);
        this.config = options;
        var apiKey = options.apiKey, environment = options.environment;
        var controllerPath = "https://controller.".concat(environment, ".pinecone.io");
        var apiConfig = {
            basePath: controllerPath,
            apiKey: apiKey,
            queryParamsStringify: utils_1.queryParamsStringify,
            headers: {
                'User-Agent': (0, utils_1.buildUserAgent)(false),
            },
            fetchApi: (0, utils_1.getFetch)(options),
        };
        var api = new pinecone_generated_ts_fetch_1.IndexOperationsApi(new pinecone_generated_ts_fetch_1.Configuration(apiConfig));
        this.describeIndex = (0, control_1.describeIndex)(api);
        this.listIndexes = (0, control_1.listIndexes)(api);
        this.createIndex = (0, control_1.createIndex)(api);
        this.deleteIndex = (0, control_1.deleteIndex)(api);
        this.configureIndex = (0, control_1.configureIndex)(api);
        this.createCollection = (0, control_1.createCollection)(api);
        this.listCollections = (0, control_1.listCollections)(api);
        this.describeCollection = (0, control_1.describeCollection)(api);
        this.deleteCollection = (0, control_1.deleteCollection)(api);
    }
    /**
     * @internal
     * This method is used by {@link Pinecone.constructor} to read configuration from environment variables.
     *
     * It looks for the following environment variables:
     * - `PINECONE_ENVIRONMENT`
     * - `PINECONE_API_KEY`
     * - `PINECONE_PROJECT_ID`
     *
     * @returns A {@link PineconeConfiguration} object populated with values found in environment variables.
     */
    Pinecone.prototype._readEnvironmentConfig = function () {
        if (!process || !process.env) {
            throw new errors_1.PineconeEnvironmentVarsNotSupportedError('Your execution environment does not support reading environment variables from process.env, so a configuration object is required when calling new Pinecone()');
        }
        var environmentConfig = {};
        var requiredEnvVarMap = {
            environment: 'PINECONE_ENVIRONMENT',
            apiKey: 'PINECONE_API_KEY',
        };
        var missingVars = [];
        for (var _i = 0, _a = Object.entries(requiredEnvVarMap); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], envVar = _b[1];
            var value = process.env[envVar] || '';
            if (!value) {
                missingVars.push(envVar);
            }
            environmentConfig[key] = value;
        }
        if (missingVars.length > 0) {
            throw new errors_1.PineconeConfigurationError("Since you called 'new Pinecone()' with no configuration object, we attempted to find client configuration in environment variables but the required environment variables were not set. Missing variables: ".concat(missingVars.join(', '), "."));
        }
        var optionalEnvVarMap = { projectId: 'PINECONE_PROJECT_ID' };
        for (var _c = 0, _d = Object.entries(optionalEnvVarMap); _c < _d.length; _c++) {
            var _e = _d[_c], key = _e[0], envVar = _e[1];
            var value = process.env[envVar];
            if (value !== undefined) {
                environmentConfig[key] = value;
            }
        }
        return environmentConfig;
    };
    /** @internal */
    Pinecone.prototype._validateConfig = function (options) {
        (0, validator_1.buildValidator)('The client configuration', data_1.PineconeConfigurationSchema)(options);
    };
    /**
     * @returns The configuration object that was passed to the Pinecone constructor.
     */
    Pinecone.prototype.getConfig = function () {
        return this.config;
    };
    /**
     * Targets a specific index for performing data operations.
     *
     * @param indexName - The name of the index to target.
     * @typeParam T - The type of the metadata object associated with each record.
     * @returns An {@link Index} object that can be used to perform data operations.
     */
    Pinecone.prototype.index = function (indexName) {
        return new data_1.Index(indexName, this.config);
    };
    /**
     * {@inheritDoc index}
     */
    // Alias method to match the Python SDK capitalization
    Pinecone.prototype.Index = function (indexName) {
        return this.index(indexName);
    };
    Pinecone.prototype.__curlStarter = function () {
        // Every endpoint is going to have a different path and expect different data (in the case of POST requests),
        // but this is a good starting point for users to see how to use curl to interact with the REST API.
        console.log('Example curl command to list indexes: ');
        console.log("curl \"https://controller.".concat(this.config.environment, ".pinecone.io/databases\" -H \"Api-Key: ").concat(this.config.apiKey, "\" -H \"Accept: application/json\""));
    };
    return Pinecone;
}());
exports.Pinecone = Pinecone;
//# sourceMappingURL=pinecone.js.map
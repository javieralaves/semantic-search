"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Index = exports.PineconeConfigurationSchema = void 0;
var upsert_1 = require("./upsert");
var fetch_1 = require("./fetch");
var update_1 = require("./update");
var query_1 = require("./query");
var deleteOne_1 = require("./deleteOne");
var deleteMany_1 = require("./deleteMany");
var deleteAll_1 = require("./deleteAll");
var describeIndexStats_1 = require("./describeIndexStats");
var vectorOperationsProvider_1 = require("./vectorOperationsProvider");
var types_1 = require("./types");
Object.defineProperty(exports, "PineconeConfigurationSchema", { enumerable: true, get: function () { return types_1.PineconeConfigurationSchema; } });
/**
 * @typeParam T - The type of metadata associated with each record.
 */
var Index = /** @class */ (function () {
    /**
     * Instantiation of Index is handled by {@link Pinecone}
     *
     * @example
     * ```js
     * const pinecone = new Pinecone();
     * const index = pinecone.index('my-index');
     * ```
     *
     * @constructor
     * @param indexName - The name of the index that will receive operations from this {@link Index} instance.
     * @param config - The configuration from the Pinecone client.
     * @param namespace - The namespace for the index.
     */
    function Index(indexName, config, namespace) {
        if (namespace === void 0) { namespace = ''; }
        this.config = config;
        this.target = {
            index: indexName,
            namespace: namespace,
        };
        var apiProvider = new vectorOperationsProvider_1.VectorOperationsProvider(config, indexName);
        this.deleteAll = (0, deleteAll_1.deleteAll)(apiProvider, namespace);
        this.deleteMany = (0, deleteMany_1.deleteMany)(apiProvider, namespace);
        this.deleteOne = (0, deleteOne_1.deleteOne)(apiProvider, namespace);
        this.describeIndexStats = (0, describeIndexStats_1.describeIndexStats)(apiProvider);
        this._fetchCommand = new fetch_1.FetchCommand(apiProvider, namespace);
        this._queryCommand = new query_1.QueryCommand(apiProvider, namespace);
        this._updateCommand = new update_1.UpdateCommand(apiProvider, namespace);
        this._upsertCommand = new upsert_1.UpsertCommand(apiProvider, namespace);
    }
    /**
     * Returns an {@link Index} targeting the specified namespace. By default, all operations take place inside the default namespace ''.
     *
     * @example
     * ```js
     * const pinecone = new Pinecone();
     * const indexNamed = pinecone.index('my-index').namespace('my-namespace');
     * ```
     *
     * @param namespace - The namespace to target within the index.
     */
    Index.prototype.namespace = function (namespace) {
        return new Index(this.target.index, this.config, namespace);
    };
    /**
     * Upsert records to the index.
     *
     * @example
     * ```js
     * const pinecone = new Pinecone();
     * await pinecone.index('my-index').upsert([{
     *  id: 'record-1',
     *  values: [0.176, 0.345, 0.263],
     * },{
     *  id: 'record-2',
     *  values: [0.176, 0.345, 0.263],
     * }])
     * ```
     *
     * @param data - An array of {@link PineconeRecord} objects to upsert.
     * @returns A promise that resolves when the upsert is completed.
     * @throws {@link Errors.PineconeConnectionError} when invalid environment, project id, or index name is configured.
     * @throws {@link Errors.PineconeArgumentError} when invalid arguments are passed.
     */
    Index.prototype.upsert = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._upsertCommand.run(data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Fetch records from the index.
     *
     * @example
     * ```js
     * const pinecone = new Pinecone();
     * await pinecone.index('my-index').fetch(['record-1', 'record-2']);
     * ```
     * @param options - The {@link FetchOptions} for the operation.
     * @returns A promise that resolves with the {@link FetchResponse} when the fetch is completed.
     * @throws {@link Errors.PineconeConnectionError} when invalid environment, project id, or index name is configured.
     * @throws {@link Errors.PineconeArgumentError} when invalid arguments are passed.
     */
    Index.prototype.fetch = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._fetchCommand.run(options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Query records from the index. Query is used to find the `topK` records in the index whose vector values are most
     * similar to the vector values of the query according to the distance metric you have configured for your index.
     * See [Query data](https://docs.pinecone.io/docs/query-data) for more on querying.
     *
     * @example
     * ```js
     * const pinecone = new Pinecone();
     * await pinecone.index('my-index').query({ topK: 3, id: 'record-1'});
     *
     * // or
     * await pinecone.index('my-index').query({ topK: 3, vector: [0.176, 0.345, 0.263] });
     * ```
     *
     * @param options - The {@link QueryOptions} for the operation.
     * @returns A promise that resolves with the {@link QueryResponse} when the query is completed.
     * @throws {@link Errors.PineconeConnectionError} when invalid environment, project id, or index name is configured.
     * @throws {@link Errors.PineconeArgumentError} when invalid arguments are passed.
     */
    Index.prototype.query = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._queryCommand.run(options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update a record in the index by id.
     *
     * @param options - The {@link UpdateOptions} for the operation.
     * @returns A promise that resolves when the update is completed.
     * @throws {@link Errors.PineconeConnectionError} when invalid environment, project id, or index name is configured.
     * @throws {@link Errors.PineconeArgumentError} when invalid arguments are passed.
     */
    Index.prototype.update = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._updateCommand.run(options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Index;
}());
exports.Index = Index;
//# sourceMappingURL=index.js.map
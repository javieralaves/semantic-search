import { buildConfigValidator } from '../validator';
import { RecordValues } from './types';
import type { PineconeRecord, RecordMetadata } from './types';
import { VectorOperationsProvider } from './vectorOperationsProvider';
export type QueryShared = {
    topK: number;
    includeValues?: boolean;
    includeMetadata?: boolean;
    filter?: object;
};
export type QueryByRecordId = QueryShared & {
    id: string;
};
export type QueryByVectorValues = QueryShared & {
    vector: RecordValues;
};
export type QueryOptions = QueryByRecordId | QueryByVectorValues;
export interface ScoredPineconeRecord<T extends RecordMetadata = RecordMetadata> extends PineconeRecord<T> {
    score?: number;
}
export type QueryResponse<T extends RecordMetadata = RecordMetadata> = {
    matches?: Array<ScoredPineconeRecord<T>>;
    namespace: string;
};
export declare class QueryCommand<T extends RecordMetadata = RecordMetadata> {
    apiProvider: VectorOperationsProvider;
    namespace: string;
    validator: ReturnType<typeof buildConfigValidator>;
    constructor(apiProvider: any, namespace: any);
    run(query: QueryOptions): Promise<QueryResponse<T>>;
}

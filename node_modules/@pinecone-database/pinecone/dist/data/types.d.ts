import type { FetchAPI } from '../pinecone-generated-ts-fetch';
export declare const PineconeConfigurationSchema: import("@sinclair/typebox").TObject<{
    environment: import("@sinclair/typebox").TString;
    apiKey: import("@sinclair/typebox").TString;
    projectId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    fetchApi: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
}>;
export type PineconeConfiguration = {
    environment: string;
    apiKey: string;
    projectId?: string;
    fetchApi?: FetchAPI;
};
export declare const RecordIdSchema: import("@sinclair/typebox").TString;
export declare const RecordValuesSchema: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
export declare const RecordSparseValuesSchema: import("@sinclair/typebox").TObject<{
    indices: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TInteger>;
    values: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
}>;
export declare const PineconeRecordSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
    values: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    sparseValues: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        indices: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TInteger>;
        values: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    }>>;
    metadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
}>;
export type RecordId = string;
export type RecordValues = Array<number>;
export type RecordSparseValues = {
    indices: Array<number>;
    values: Array<number>;
};
export type RecordMetadataValue = string | boolean | number | Array<string>;
export type RecordMetadata = Record<string, RecordMetadataValue>;
export type PineconeRecord<T extends RecordMetadata = RecordMetadata> = {
    id: RecordId;
    values: RecordValues;
    sparseValues?: RecordSparseValues;
    metadata?: T;
};
